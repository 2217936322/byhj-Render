#version 430 core

//Define the number of CPs in the ouput pathc
layout (vertices = 1) out;

uniform float u_tessLevel = 5.0f;

in VS_OUT {
  vec3 fragPos;
  vec3 normal;
  vec2 texcoord;
}vs_out[];


struct OutputPatch {

    vec3 WorldPos_B030;                                                                         
    vec3 WorldPos_B021;                                                                         
    vec3 WorldPos_B012;                                                                         
    vec3 WorldPos_B003;                                                                         
    vec3 WorldPos_B102;                                                                         
    vec3 WorldPos_B201;                                                                         
    vec3 WorldPos_B300;                                                                         
    vec3 WorldPos_B210;                                                                         
    vec3 WorldPos_B120;                                                                         
    vec3 WorldPos_B111;                                                                         
    vec3 Normal[3];                                                                             
    vec2 TexCoord[3];  
};  

out patch OutputPatch patch0;


vec3 ProjectToPlane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal)                              
{                                                                                               
    vec3 v = Point - PlanePoint;                                                                
    float Len = dot(v, PlaneNormal);                                                            
    vec3 d = Len * PlaneNormal;                                                                 
    return (Point - d);                                                                         
} 

void CalcPositions()                                                                            
{                                                                                               
    // The original vertices stay the same                                                      
    patch0.WorldPos_B030 = vs_out[0].fragPos;                                                   
    patch0.WorldPos_B003 = vs_out[1].fragPos;                                                   
    patch0.WorldPos_B300 = vs_out[2].fragPos;                                                   
                                                                                                
    // Edges are names according to the opposing vertex                                         
    vec3 EdgeB300 = patch0.WorldPos_B003 - patch0.WorldPos_B030;                                
    vec3 EdgeB030 = patch0.WorldPos_B300 - patch0.WorldPos_B003;                                
    vec3 EdgeB003 = patch0.WorldPos_B030 - patch0.WorldPos_B300;                                
                                                                                                
    // Generate two midpoints on each edge                                                      
    patch0.WorldPos_B021 = patch0.WorldPos_B030 + EdgeB300 / 3.0;                               
    patch0.WorldPos_B012 = patch0.WorldPos_B030 + EdgeB300 * 2.0 / 3.0;                         
    patch0.WorldPos_B102 = patch0.WorldPos_B003 + EdgeB030 / 3.0;                               
    patch0.WorldPos_B201 = patch0.WorldPos_B003 + EdgeB030 * 2.0 / 3.0;                         
    patch0.WorldPos_B210 = patch0.WorldPos_B300 + EdgeB003 / 3.0;                               
    patch0.WorldPos_B120 = patch0.WorldPos_B300 + EdgeB003 * 2.0 / 3.0;                         
                                                                                                
    // Project each midpoint on the plane defined by the nearest vertex and its normal          
    patch0.WorldPos_B021 = ProjectToPlane(patch0.WorldPos_B021, patch0.WorldPos_B030, patch0.Normal[0]);     
    patch0.WorldPos_B012 = ProjectToPlane(patch0.WorldPos_B012, patch0.WorldPos_B003, patch0.Normal[1]);     
    patch0.WorldPos_B102 = ProjectToPlane(patch0.WorldPos_B102, patch0.WorldPos_B003, patch0.Normal[1]);     
    patch0.WorldPos_B201 = ProjectToPlane(patch0.WorldPos_B201, patch0.WorldPos_B300, patch0.Normal[2]);     
    patch0.WorldPos_B210 = ProjectToPlane(patch0.WorldPos_B210, patch0.WorldPos_B300, patch0.Normal[2]);     
    patch0.WorldPos_B120 = ProjectToPlane(patch0.WorldPos_B120, patch0.WorldPos_B030, patch0.Normal[0]);     
                                                                                                             
    // Handle the center                                                                                     
    vec3 Center = (patch0.WorldPos_B003 + patch0.WorldPos_B030 + patch0.WorldPos_B300) / 3.0;                
    patch0.WorldPos_B111 = (patch0.WorldPos_B021 + patch0.WorldPos_B012 + patch0.WorldPos_B102 +             
                            patch0.WorldPos_B201 + patch0.WorldPos_B210 + patch0.WorldPos_B120) / 6.0;       
    patch0.WorldPos_B111 += (patch0.WorldPos_B111 - Center) / 2.0;                              
}    


void main()                                                                                     
{                                                                                               
    // Set the control points of the output patch                                               
    for (int i = 0 ; i < 3 ; i++) {                                                             
        patch0.Normal[i] = vs_out[i].normal;                                                     
        patch0.TexCoord[i] = vs_out[i].texcoord;                                                 
    }                                                                                           
                                                                                                
    CalcPositions();                                                                            
                                                                                                
    // Calculate the tessellation levels                                                        
    gl_TessLevelOuter[0] = u_tessLevel;                                                  
    gl_TessLevelOuter[1] = u_tessLevel;                                                  
    gl_TessLevelOuter[2] = u_tessLevel;                                                  
    gl_TessLevelInner[0] = u_tessLevel;                                                  
}   